Use Graph Neural Networks on the datasets (Planetoid Cora Dataset)/ Jazz 
Musicians Network. 

!pip install torch 
!pip install torch-geometric 
import torch 
import torch.nn as nn 
import torch.nn.functional as F 
from torch_geometric.datasets import Planetoid 
import torch_geometric.transforms as T 
from torch_geometric.nn import GCNConv 
dataset = Planetoid(root='./', name='Cora', transform=T.NormalizeFeatures()) 
import torch 
import torch.nn.functional as F 
from torch_geometric.nn import GCNConv 
data = dataset[0]  # Assuming dataset is already loaded 
# Define the GCN model 
class GCN(torch.nn.Module): 
    def __init__(self, in_channels, hidden_channels, out_channels) 
        super(GCN, self).__init__() 
        self.conv1 = GCNConv(in_channels, hidden_channels) 
        self.conv2 = GCNConv(hidden_channels, out_channels) 
  
    def forward(self, x, edge_index): 
        x = self.conv1(x, edge_index) 
        x = F.relu(x) 
        x = F.dropout(x, training=self.training) 
        x = self.conv2(x, edge_index) 
        return F.log_softmax(x, dim=1) 
  
# Initialize the model and optimizer 
model = GCN(dataset.num_features, 16, dataset.num_classes) 
print(model) 
optimizer = torch.optim.Adam(model.parameters(), lr=0.01, weight_decay=5e-4) 
print(optimizer) 
  
# Training function 
def train():
 model.train() 
    optimizer.zero_grad() 
    out = model(data.x, data.edge_index) 
    loss = F.nll_loss(out[data.train_mask], data.y[data.train_mask]) 
    loss.backward() 
    optimizer.step() 
    return loss.item() 
  
# Test function 
def test(): 
    model.eval() 
    logits = model(data.x, data.edge_index) 
    accs = [] 
    for mask in [data.train_mask, data.val_mask, data.test_mask]: 
        pred = logits[mask].max(1)[1] 
        acc = pred.eq(data.y[mask]).sum().item() / mask.sum().item() 
        accs.append(acc) 
    return accs 
# Training loop 
for epoch in range(200): 
    loss = train() 
    train_acc, val_acc, test_acc = test() 
    if epoch % 10 == 0: 
print(f'Epoch {epoch:03d}, Loss: {loss:.4f}, ' 
f'Train Acc: {train_acc:.4f}, Val Acc: {val_acc:.4f}, Test Acc: {test_acc:.4f}') 
# Final test accuracy 
model.eval() 
_, pred = model(data.x, data.edge_index).max(dim=1) 
correct = pred[data.test_mask].eq(data.y[data.test_mask]).sum().item() 
acc = correct / data.test_mask.sum().item() 
print(f'Test Accuracy: {acc:.4f}')
